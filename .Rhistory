knitr::opts_chunk$set(echo = TRUE)
usethis::edit_r_environ("project")
readRenviron(".Renviron")
usethis::edit_r_environ("project")
setwd("~/Desktop/spring_2020/sta141-b/141bFinal")
# loading in api keys
readRenviron(".Renviron")
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = riotKey
)
library(tidyverse)
library(jsonlite)
library(lubridate)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = riotKey
)
# loading in api keys
readRenviron(".Renviron")
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = riotKey
)
knitr::opts_chunk$set(echo = TRUE)
# making the environ file
# usethis::edit_r_environ("project")
# loading in api keys
readRenviron(".Renviron")
library(tidyverse)
library(jsonlite)
library(lubridate)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = riotKey
)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
r <- GET(
bite
)
library(tidyverse)
library(jsonlite)
library(lubridate)
library(httr)
https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/bite?api_key=RGAPI-cff6fb09-9a1b-49b6-b5a3-02b773c2acc5
r <- GET(
bite
)
r <- GET(
bite
)
r <- GET(
bite
)
stop_for_status(r)
json <- content(r, as = "text")
fromJSON(json)
r
stop_for_status(r)
json <- content(r, as = "text")
fromJSON(json)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
r <- GET(
bite
)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
stop_for_status(summonerName)
json <- content(summonerName, as = "text")
fromJSON(json)
View(summonerName)
fromJSON(json)
json$id
json
fromJSON(json$id)
fromJSON(json.id)
json <- content(summonerName, as = "text")
json
fromJSON(json)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
stop_for_status(summonerName)
json <- content(summonerName, as = "text")
fromJSON(json)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
stop_for_status(summonerName)
json <- content(summonerName, as = "text")
sumStats <- fromJSON(json, flatten = TRUE)
sumStats
sumStats
sumStats$id
sumStats
sumStats$name
sumStats
leaderBoard <- GET(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards"
)
stop_for_status(leaderBoard)
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards?api_key={key}",
key = Sys.getenv("riotKey")
)
stop_for_status(leaderBoard)
json2 <- content(leaderBoard, as = "text")
topRanks <- fromJSON(json2, flatten = TRUE)
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards?api_key={key}",
key = Sys.getenv("riotKey")
)
stop_for_status(leaderBoard)
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- get(
leaderBoard
)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
stop_for_status(summonerName)
json <- content(summonerName, as = "text")
sumStats <- fromJSON(json, flatten = TRUE)
sumStats
sumStats
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- GET(
leaderBoard
)
stop_for_status(leaderBoard)
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- GET(
leaderBoard
)
stop_for_status(leaderBoard)
leaderBoard <- str_glue(
"https://americas.api.riotgames.com/lor/ranked/v1/leaderboards/?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- GET(
leaderBoard
)
stop_for_status(leaderBoard)
leaderBoardCall <- GET(
leaderBoard
)
stop_for_status(leaderBoardCall)
json2 <- content(leaderBoard, as = "text")
json2 <- content(leaderBoardCall, as = "text")
topRanks <- fromJSON(json2, flatten = TRUE)
topRanks
leaderBoard <- str_glue(
"https://na1.api.riotgames.com/lol/league/v4/challengerleagues/by-queue/RANKED_SOLO_5x5/?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- GET(
leaderBoard
)
json2 <- content(leaderBoardCall, as = "text")
topRanks <- fromJSON(json2, flatten = TRUE)
topRanks
sumStats
library(shiny); runApp('~/Downloads/q3.R')
install.packages("styler")
library(ggplot2)
topRanks
topRanks %>%
filter(veteran = TRUE)
topRanks
topRanks %>%
group_by(veteran)
topRanks %>%
group_by(veteran)
topRanks %>%
group_by(topRanks$tier)
filter(topRanks, veteran == TRUE)
topRanks
filter(topRanks, veteran == TRUE)
dplyr::filter(topRanks, veteran == TRUE)
library(dplyr)
dplyr::filter(topRanks, veteran == TRUE)
dpylr
dpylr::
dpylr::filter()
library(dplyr)
library(tidyverse)
library(jsonlite)
library(lubridate)
library(httr)
library(ggplot2)
library(dplyr)
dpylr::filter()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages(c("backports", "boot", "broom", "car", "carData", "class", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "ggpubr", "git2r", "haven", "httpuv", "isoband", "KernSmooth", "lattice", "lme4", "lubridate", "maptools", "MASS", "modelr", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "pkgload", "ps", "purrr", "reshape2", "rlang", "rmarkdown", "rversions", "scales", "sp", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "withr", "xfun", "xml2", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
dpylr::
topRanks
topRanks %>%
arrange(desc(leaguePoints))
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(lubridate)
library(httr)
library(ggplot2)
library(dplyr)
bite <- str_glue(
"https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/{ign}/?api_key={key}",
ign = "bite",
key = Sys.getenv("riotKey")
)
summonerName <- GET(
bite
)
stop_for_status(summonerName)
json <- content(summonerName, as = "text")
sumStats <- fromJSON(json, flatten = TRUE)
sumStats
sumStats
leaderBoard <- str_glue(
"https://na1.api.riotgames.com/lol/league/v4/challengerleagues/by-queue/RANKED_SOLO_5x5/?api_key={key}",
key = Sys.getenv("riotKey")
)
leaderBoardCall <- GET(
leaderBoard
)
stop_for_status(leaderBoardCall)
json2 <- content(leaderBoardCall, as = "text")
topRanks <- fromJSON(json2, flatten = TRUE)
topRanks %>%
arrange(desc(leaguePoints))
topRanks %>%
arrange(leaguePoints)
View(topRanks)
topRanks %>%
arrange(topRanks$entries$leaguePoints)
topRanks %>%
as.data.frame %>%
arrange(topRanks$entries$leaguePoints)
topRanks %>%
as.data.frame %>%
arrange(desc(topRanks$entries$leaguePoints))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("League of Legends rankings"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
shiny::runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
# loading in api keys
# usethis::edit_r_environ("project")
readRenviron(".Renviron")
runApp('RiotAPI')
runApp('RiotAPI')
# making the environ file
# usethis::edit_r_environ("project")
# loading in api keys
readRenviron(".Renviron")
# loading in api keys
# usethis::edit_r_environ("project")
readRenviron(".Renviron")
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
# making the environ file
# usethis::edit_r_environ("project")
# loading in api keys
readRenviron(".Renviron")
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
hist(topRanks$entries$leaguePoints)
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
shiny::runApp('RiotAPI')
runApp('RiotAPI')
# loading in api keys
# usethis::edit_r_environ("project")
readRenviron(".Renviron")
runApp()
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('RiotAPI')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp()
runApp('test123')
runApp('test123')
runApp('RiotAPI')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('test123')
runApp()
runApp()
runApp('test123')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('test1234')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('test1234')
runApp('test1234')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
# loading in api keys
usethis::edit_r_environ("project")
readRenviron(".Renviron")
# loading in api keys
usethis::edit_r_environ("project")
readRenviron(".Renviron")
library(usethis)
runApp('~/Desktop/spring_2020/sta141-b/mealGenerator')
setwd("~/Desktop/spring_2020/sta141-b/141bFinal")
runApp('Final')
# loading in api keys
usethis::edit_r_environ("project")
usethis::edit_r_environ("project")
setwd("~/Desktop/spring_2020/sta141-b/141bFinal/Final")
knitr::opts_chunk$set(echo = TRUE)
usethis::edit_r_environ("project")
library(usethis)
usethis::edit_r_environ("project")
runApp()
